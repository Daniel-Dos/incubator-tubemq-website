{
  "filename": "consumer_example.md",
  "__html": "<h2>Consumer Example</h2>\n<p>TubeMQ provides two ways to consumer message, PullConsumer and PushConsumer:</p>\n<ol>\n<li>\n<p>PullConsumer</p>\n<pre><code>public class PullConsumerExample {\n\n    public static void main(String[] args) throws Throwable {\n        final String localHostIP = &quot;127.0.0.1&quot;;\n        final String masterHostAndPort = &quot;localhost:8000&quot;;\n        final String topic = &quot;test&quot;;\n        final String group = &quot;test-group&quot;;\n        final ConsumerConfig consumerConfig = new ConsumerConfig(localHostIP, masterHostAndPort, group);\n        /* consumeModel\n         *  Set the start position of the consumer group. The value can be [-1, 0, 1]. Default value is 0.\n         * -1: Start from 0 for the first time. Otherwise start from last consume position.\n         *  0: Start from the latest position for the first time. Otherwise start from last consume position.\n         *  1: Start from the latest consume position.\n        */\n        consumerConfig.setConsumeModel(0);\n        final MessageSessionFactory messageSessionFactory = new TubeSingleSessionFactory(consumerConfig);\n        final PullMessageConsumer messagePullConsumer = messageSessionFactory.createPullConsumer(consumerConfig);\n        messagePullConsumer.subscribe(topic, null);\n        messagePullConsumer.completeSubscribe();\n        // wait for client to join the exact consumer queue that consumer group allocated\n        while (!messagePullConsumer.isPartitionsReady(1000)) {\n            ThreadUtils.sleep(1000);\n        }\n        while(true){\n            ConsumerResult result = messagePullConsumer.getMessage();\n            if (result.isSuccess()) {\n                List&lt;Message&gt; messageList = result.getMessageList();\n                for (Message message : messageList) {\n                    System.out.println(&quot;received message : &quot; + message);\n                }\n                messagePullConsumer.confirmConsume(result.getConfirmContext(), true);\n            } else{\n                if (result.getErrCode() == 400) {\n                    ThreadUtils.sleep(100);\n                } else {\n                    if (result.getErrCode() != 404) {\n                        System.out.println(String.format(&quot;Receive messages errorCode is %d, Error message is %s&quot;, result.getErrCode(), result.getErrMsg()));\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>PushConsumer</p>\n<pre><code>public class PushConsumerExample {\n\n    public static void main(String[] args) throws Throwable {\n        final String localHostIP = &quot;127.0.0.1&quot;;\n        final String masterHostAndPort = &quot;localhost:8000&quot;;\n        final String topic = &quot;test&quot;;\n        final String group = &quot;test-group&quot;;\n        final ConsumerConfig consumerConfig = new ConsumerConfig(localHostIP, masterHostAndPort, group);\n        /* consumeModel\n         *  Set the start position of the consumer group. The value can be [-1, 0, 1]. Default value is 0.\n         * -1: Start from 0 for the first time. Otherwise start from last consume position.\n         *  0: Start from the latest position for the first time. Otherwise start from last consume position.\n         *  1: Start from the latest consume position.\n        */\n        consumerConfig.setConsumeModel(0);\n        final MessageSessionFactory messageSessionFactory = new TubeSingleSessionFactory(consumerConfig);\n        final PushMessageConsumer pushConsumer = messageSessionFactory.createPushConsumer(consumerConfig);\n        pushConsumer.subscribe(topic, null, new MessageListener() {\n\n            @Override\n            public void receiveMessages(List&lt;Message&gt; messages) throws InterruptedException {\n                for (Message message : messages) {\n                    System.out.println(&quot;received message : &quot; + new String(message.getData()));\n                }\n            }\n\n            @Override\n            public Executor getExecutor() {\n                return null;\n            }\n\n            @Override\n            public void stop() {\n                //\n            }\n        });\n        pushConsumer.completeSubscribe();\n        CountDownLatch latch = new CountDownLatch(1);\n        latch.await(10, TimeUnit.MINUTES);\n    }\n}\n</code></pre>\n</li>\n</ol>\n",
  "link": "/zh-cn/docs/consumer_example.html",
  "meta": {}
}